<?xml version="1.0"?>
<robot xmlns:xacro="http://www.ros.org/wiki/xacro">

  <xacro:if value="$(arg use_gazebo_controllers)">
    <gazebo>
      <plugin name="$(arg prefix)gazebo_ros2_control" filename="libgazebo_ros2_control.so">
        <parameters>$(arg gazebo_controllers)</parameters>
      </plugin>
    </gazebo>
  </xacro:if>

  <gazebo reference="$(arg prefix)imu_link">
    <sensor name="$(arg prefix)imu_sensor" type="imu">
    <plugin filename="libgazebo_ros_imu_sensor.so" name="$(arg prefix)imu_plugin">
        <ros>
          <namespace>$(arg prefix)</namespace>
          <remapping>~/out:=imu/data_raw</remapping>
        </ros>
        <initial_orientation_as_reference>false</initial_orientation_as_reference>
      </plugin>
      <always_on>true</always_on>
      <update_rate>100</update_rate>
      <visualize>true</visualize>
      <imu>
      <angular_velocity>
        <x>
          <noise type="gaussian">
            <mean>0.0</mean>
            <stddev>2e-4</stddev>
            <bias_mean>0.0000075</bias_mean>
            <bias_stddev>0.0000008</bias_stddev>
          </noise>
        </x>
        <y>
          <noise type="gaussian">
            <mean>0.0</mean>
            <stddev>2e-4</stddev>
            <bias_mean>0.0000075</bias_mean>
            <bias_stddev>0.0000008</bias_stddev>
          </noise>
        </y>
        <z>
          <noise type="gaussian">
            <mean>0.0</mean>
            <stddev>2e-4</stddev>
            <bias_mean>0.0000075</bias_mean>
            <bias_stddev>0.0000008</bias_stddev>
          </noise>
        </z>
      </angular_velocity>
      <linear_acceleration>
        <x>
          <noise type="gaussian">
            <mean>0.0</mean>
            <stddev>1.7e-2</stddev>
            <bias_mean>0.1</bias_mean>
            <bias_stddev>0.001</bias_stddev>
          </noise>
        </x>
        <y>
          <noise type="gaussian">
            <mean>0.0</mean>
            <stddev>1.7e-2</stddev>
            <bias_mean>0.1</bias_mean>
            <bias_stddev>0.001</bias_stddev>
          </noise>
        </y>
        <z>
          <noise type="gaussian">
            <mean>0.0</mean>
            <stddev>1.7e-2</stddev>
            <bias_mean>0.1</bias_mean>
            <bias_stddev>0.001</bias_stddev>
          </noise>
        </z>
      </linear_acceleration>
    </imu>
    </sensor>
  </gazebo>

  <xacro:if value="$(optenv JACKAL_GPS 0)">
    <gazebo reference="$(arg prefix)navsat_link">
      <sensor name="$(arg prefix)gps_sensor" type="gps">
            <always_on>true</always_on>
            <update_rate>20</update_rate>
            <gps>
              <position_sensing>
                <horizontal>
                  <noise type="gaussian">
                    <mean>0.0</mean>
                    <stddev>2e-4</stddev>
                  </noise>
                </horizontal>
                <vertical>
                  <noise type="gaussian">
                    <mean>0.0</mean>
                    <stddev>2e-4</stddev>
                  </noise>
                </vertical>
              </position_sensing>
            </gps>
            <plugin name="$(arg prefix)gps_plugin" filename="libgazebo_ros_gps_sensor.so">
              <ros>
                <namespace>$(arg prefix)/gps</namespace>
                <argument>~/out:=data</argument>
              </ros>
              <frame_name>navsat_link</frame_name>
            </plugin>
      </sensor>
    </gazebo>
  </xacro:if>

  <xacro:if value="$(optenv JACKAL_WHEEL_SLIP 0)">
    <gazebo>
      <plugin filename="libgazebo_ros_wheel_slip.so" name="wheels_slip">
        <wheel link_name="front_left_wheel_link">
          <slip_compliance_lateral>1.0</slip_compliance_lateral>
          <slip_compliance_longitudinal>1.0</slip_compliance_longitudinal>
          <wheel_normal_force>40</wheel_normal_force>
          <wheel_radius>${wheel_radius}</wheel_radius>
        </wheel>
        <wheel link_name="front_right_wheel_link">
          <slip_compliance_lateral>1.0</slip_compliance_lateral>
          <slip_compliance_longitudinal>1.0</slip_compliance_longitudinal>
          <wheel_normal_force>40</wheel_normal_force>
          <wheel_radius>${wheel_radius}</wheel_radius>
        </wheel>
        <wheel link_name="rear_left_wheel_link">
          <slip_compliance_lateral>1.0</slip_compliance_lateral>
          <slip_compliance_longitudinal>1.0</slip_compliance_longitudinal>
          <wheel_normal_force>40</wheel_normal_force>
          <wheel_radius>${wheel_radius}</wheel_radius>
        </wheel>
        <wheel link_name="rear_right_wheel_link">
          <slip_compliance_lateral>1.0</slip_compliance_lateral>
          <slip_compliance_longitudinal>1.0</slip_compliance_longitudinal>
          <wheel_normal_force>40</wheel_normal_force>
          <wheel_radius>${wheel_radius}</wheel_radius>
        </wheel>
      </plugin>
    </gazebo>
  </xacro:if>

  <gazebo>
    <plugin name="gazebo_ros_p3d" filename="libgazebo_ros_pose3d.so">
        <ros>
          <namespace>/jackal</namespace>
          <!-- <remapping>odom</remapping> -->
        </ros>
        <body_name>base_link</body_name>
        <update_rate>10</update_rate>
        <gaussian_noise>0.0</gaussian_noise>
        <xyz_offset>0 0 0</xyz_offset>
        <rpy_offset>0 0 0</rpy_offset>
        <publish_tf>true</publish_tf>
        <publish_map_to_world>true</publish_map_to_world>
      </plugin>
  </gazebo>

  <xacro:unless value="$(arg use_gazebo_controllers)">
    <gazebo>
      <plugin name="skid_steer_drive" filename="libgazebo_ros_diff_drive.so">

        <ros>
          <!-- Add a namespace -->
          <namespace>/jackal_velocity_controller</namespace>
          <remapping>cmd_vel:=cmd_vel_unstamped</remapping>
        </ros>

        <!-- Update rate in Hz -->
        <update_rate>30</update_rate>
        <num_wheel_pairs>2</num_wheel_pairs>

        <!-- wheels -->
        <left_joint>front_left_wheel_joint</left_joint>
        <right_joint>front_right_wheel_joint</right_joint>
        <left_joint>rear_left_wheel_joint</left_joint>
        <right_joint>rear_right_wheel_joint</right_joint>

        <!-- kinematics -->
        <wheel_separation>${track}</wheel_separation>
        <wheel_diameter>${wheel_radius*2}</wheel_diameter>

        <!-- limits -->
        <max_wheel_torque>2</max_wheel_torque>
        <max_wheel_acceleration>20.0</max_wheel_acceleration>


        <!-- output -->
        <publish_odom>false</publish_odom>
        <publish_odom_tf>false</publish_odom_tf>
        <publish_wheel_tf>true</publish_wheel_tf>

        <odometry_topic>odom</odometry_topic>
        <odometry_frame>odom</odometry_frame>
        <robot_base_frame>base_link</robot_base_frame>

      </plugin>
    </gazebo>
  </xacro:unless>

  <gazebo reference="base_link">
    <turnGravityOff>false</turnGravityOff>
  </gazebo>

  <gazebo reference="chassis_link">
    <material>Gazebo/DarkGrey</material>
    <turnGravityOff>false</turnGravityOff>
  </gazebo>
    <gazebo reference="imu_link">
    <turnGravityOff>false</turnGravityOff>
  </gazebo>

  <gazebo reference="navsat_link">
    <material>Gazebo/DarkGrey</material>
    <turnGravityOff>false</turnGravityOff>
  </gazebo>
  <gazebo reference="front_fender_link">
    <material>Gazebo/Yellow</material>
    <turnGravityOff>false</turnGravityOff>
  </gazebo>
  <gazebo reference="rear_fender_link">
    <material>Gazebo/Yellow</material>
    <turnGravityOff>false</turnGravityOff>
  </gazebo>
</robot>
